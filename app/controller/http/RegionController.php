<?php

namespace app\controller\http;

use app\library\HttpCode;
use app\library\Validate;
use app\logic\RegionLogic;
use support\Response;

class RegionController extends Controller
{
    
    protected string $logic = RegionLogic::class;
    
    
    /**
     * @return Response
     */
    public function getList(): Response
    {
        return parent::getList(); // TODO: Change the autogenerated stub
    }
    
    public function getProvince()
    {
        $data   = $this->params();
        $errors = Validate::check($data, [
            'keyword' => ["required" => TRUE],
        ]);
        
        if ($errors) return $this->error($errors, HttpCode::MISSING_REQUIRED_FIELD);
        try {
            
            $listData = RegionLogic::getList([['level', 0], ['name', 'startWith', $data['keyword']]]);
            return $this->success($listData);
        } catch (\Throwable $e) {
            var_dump($e->getMessage());
        }
    }
    
    public function getCity()
    {
        $data   = $this->params();
        $errors = Validate::check($data, [
            'keyword' => ["required" => TRUE],
        ]);
        
        if ($errors) return $this->error($errors, HttpCode::MISSING_REQUIRED_FIELD);
        
        try {
            $conditions = [['level', 1], ['name', 'startWith', $data['keyword']]];
            if (!empty($data['province'])) {
                $conditions[] = ['parent_code', 'in', $data['province']];
            }
            
            $listData = RegionLogic::getList($conditions);
            return $this->success($listData);
        } catch (\Throwable $e) {
            var_dump($e->getMessage());
        }
    }
    
    public function getTreeData()
    {
        return $this->success(RegionLogic::regionTree());
    }
}