<?php

namespace app\logic;

use app\model\Product;
use app\model\ProductPackage;
use Exception;
use Illuminate\Support\Arr;
use Illuminate\Support\Str;
use RedisException;

// todo: 添加城市 省份选择
class ProductPackageLogic extends BaseLogic
{
    protected static string $model    = ProductPackage::class;
    protected static bool   $useCache = TRUE;
    
    
    /**
     * @param int|array|string $idOrCondition
     * @param array            $data
     *
     * @return bool
     * @throws Exception
     */
    
    public static function modify(int|array|string $idOrCondition, array $data): bool
    {
        
        // 处理在网佣金 , 将视觉规则转换为 方便执行的规则 ,存入 exec_comm字段中
        if (!empty($data['commission_config']['online']['comm'])) {
            $data['commission_config']['online']['exec_comm'] = static::convertOnlineCommission($data['commission_config']['online']['comm']);
        }
        // 处理返费 , 将视觉规则转换为 方便执行的规则 ,存入 exec字段中
        if (!empty($data['recharge_config']) && $data['recharge_status']) {
            $data['recharge_config']['exec'] = static::convertRechargeConfig($data['recharge_config']['show']);
        }
        return parent::modify($idOrCondition, $data); // TODO: Change the autogenerated stub
    }
    
    
    protected static function formatSaveData($data, bool $isEdit = FALSE): array
    {
        $data['standard_fee']   = $data['standard_config']['fee'] ?? 0;
        $data['standard_data']  = $data['standard_config']['data'] ?? 0;
        $data['standard_voice'] = $data['standard_config']['voice'] ?? 0;
        $data['standard_sms']   = $data['standard_config']['sms'] ?? 0;
        
        
        return parent::formatSaveData($data, $isEdit);
    }
    
    /**
     * 将充值配置数组转换为以月份为键、金额为值的关联数组
     *
     * @param array $configArray 充值配置数组，格式为：[['month' => '1', 'amount' => 10], ['month' => '2|3|4', 'amount' => 20]]
     *
     * @return array 以月份为键、金额为值的关联数组，格式为：[1 => 10, 2 => 20, 3 => 20, 4 => 20]
     */
    public static function convertRechargeConfig(array $configArray): array
    {
        // 创建一个空数组，用于存储结果
        $array = [];
        
        // 遍历充值配置数组中的每个元素
        foreach ($configArray as $conf) {
            // 获取当前充值配置的月份和金额
            $month  = str_replace(' ', '', $conf['month']);
            $amount = $conf['amount'];
            
            // 如果月份为空或金额不是数字，则跳过当前循环
            if (empty($conf['month'])) continue;
            if (!is_numeric($amount)) continue;
            
            // 根据月份格式将对应月份和金额存入结果数组中
            if (is_numeric($month)) { // 格式为 "1"、"2"、"3"
                if (!isset($array[$month])) {
                    $array[$month] = $amount;
                }
            } else if (str_contains("|", $month)) { // 格式为 "2|3|4"
                $months = explode("|", $month);
                foreach ($months as $m) {
                    if (!isset($array[$m])) $array[$m] = $amount;
                }
            } else if (str_contains('-', $month)) { // 格式为 "5-8"
                $arr    = explode('-', $month);
                $months = range($arr[0], $arr[1]);
                foreach ($months as $m) {
                    if (!isset($array[$m])) $array[$m] = $amount;
                }
            }
        }
        
        return $array;
    }
    
    /**
     * 将在线计费佣金配置数组转换为以月份为键、代理商佣金和分销商佣金为值的关联数组
     *
     * @param array $comm 在线计费佣金配置数组，格式为：[['month' => '1', 'p' => 0.2, 'd' => 0.3], ['month' => '2-3', 'p' => 0.3, 'd'
     *                    => 0.4]]
     *
     * @return array 以月份为键、代理商佣金和分销商佣金为值的关联数组，格式为：[1 => ['p' => 0.2, 'd' => 0.3], 2 => ['p' => 0.3, 'd' => 0.4], 3 =>
     *               ['p' => 0.3, 'd' => 0.4]]
     */
    public static function convertOnlineCommission(array $comm): array
    {
        // 创建一个空数组，用于存储结果
        $config = [];
        
        // 遍历在线计费佣金配置数组中的每个元素
        foreach ($comm as $item) {
            $month = $item['month'];
            
            // 如果月份为单个数字，则将该数字作为键，将对应的代理商佣金和分销商佣金作为值存入结果数组中
            if (is_numeric($month)) {
                $month = intval($month);
                if (!isset($config[$month])) {
                    $config[$month] = ["p" => $item['p'], "d" => $item['d']];
                }
            } // 如果月份为连续的数字区间，则将区间内的每个数字依次作为键，将对应的代理商佣金和分销商佣金作为值存入结果数组中
            else if (str_contains($month, '-')) {
                $monthRange = explode('-', $month);
                $start      = intval($monthRange[0]);
                $end        = intval($monthRange[1]);
                for ($i = $start; $i <= $end; $i ++) {
                    if (!isset($config[$i])) {
                        $config[$i] = ["p" => $item['p'], "d" => $item['d']];
                    }
                }
            } // 如果月份为多个数字，则将每个数字依次作为键，将对应的代理商佣金和分销商佣金作为值存入结果数组中
            else if (str_contains($month, '|')) {
                $monthArray = explode('|', $month);
                foreach ($monthArray as $m) {
                    $m = intval($m);
                    if (!isset($config[$m])) {
                        $config[$m] = ["p" => $item['p'], "d" => $item['d']];
                    }
                }
            }
        }
        
        // 返回以月份为键、代理商佣金和分销商佣金为值的关联数组
        return $config;
    }
    
    
    /**
     * 生成唯一的商品代码
     *
     * @param int $packageId 商品 ID（可选，默认为 0）
     *
     * @return string 返回唯一的商品代码
     *
     * @throws Exception 如果无法生成唯一商品代码，则抛出异常
     */
    public static function createCode(int $packageId = 0): string
    {
        // 创建模型实例
        $model = new static::$model();
        
        // 生成唯一商品代码
        for ($i = 0; $i < 1000; $i ++) {
            $code   = Str::random(18);
            $exists = $model
                ->where(function ($query) use ($packageId) {
                    if (!empty($packageId)) {
                        $query->where('id', '<>', $packageId);
                    }
                })
                ->where('code', $code)
                ->exists();
            if (!$exists) {
                break;
            }
            // 如果循环 1000 次仍无法生成唯一商品代码，则抛出异常
            if ($i === 999) {
                throw new Exception("Unable to generate unique code after 1000 attempts");
            }
        }
        return $code;
    }
    
    
    /**
     * 获取分步表单字段或商品详情
     *
     * @param int $step 步骤，取值范围为0到6
     * @param int $id   商品ID，如果为0，则获取默认数据
     *
     * @return array 详细信息数组
     * @throws RedisException
     * @throws Exception
     */
    public static function step(int $step = 0, int $id = 0): array
    {
        //status
        // 定义每个步骤的字段列表
        $steps     = [
            0 => "name,operator,cover,standard_config,price,price_show,price_by_number,agreement,stock_status,stock_num,select_num_status,select_num_config,intro,tags,code,sale_mode",
            1 => "form_config,page_config,images",
            2 => "local_valid_config,code_remote,buy_num_valid_status,buy_num_valid_config,interceptor",
            3 => "commission_total,commission_condition,commission_config,carrier_status,carrier_config",
            4 => "pre_charge_amount,active_url,recharge_status,recharge_config",
            5 => "remote_api_status,remote_api_config",
        ];
        $stepArray = explode(',', $steps[$step]);
        
        // 获取商品详情或默认数据
        return $id > 0
            ? Arr::only(static::getOne($id), $stepArray)
            : Arr::only(static::defaultData(), $stepArray);
    }
    
    
    /**
     * 获取默认产品数据模板
     *
     * @return array 返回默认产品数据模板
     * @throws Exception
     */
    public static function defaultData(): array
    {
        return [
            'name'                 => NULL, // 产品名称
            'operator'             => NULL, // 运营商
            'type'                 => Product::PACKAGE, // 产品类型：套餐,实物
            'cover'                => NULL, // 产品封面图
            'images'               => [], // 产品轮播图列表
            'status'               => FALSE, // 产品上下架状态
            'intro'                => NULL,
            'tags'                 => NULL,
            'standard_config'      => [ // 标准配置：费用,语音,短信,流量,直充流量
                                        'fee'         => 0, // 费用
                                        'voice'       => 0, // 语音
                                        'sms'         => 0, // 短信
                                        'data'        => 0, // 流量
                                        'data_direct' => 0, // 直充流量
            ],
            'code'                 => static::createCode(), // 产品编码
            'sale_mode'            => 0,//销售模式   1:为卖号模式
            'price'                => 0, // 产品售价
            'price_show'           => 0, // 产品显示价格
            'price_by_number'      => FALSE, // 卖号模式
            'interceptor'          => [], // 拦截器：产品售卖前可选项
            'agreement'            => [], // 协议：产品售卖后必选项
            'stock_status'         => FALSE, // 库存状态
            'stock_num'            => 0, // 库存数量
            'shop_id'              => 0, // 店铺 ID
            'select_num_status'    => FALSE, // 开卡数量选择状态
            'select_num_config'    => ['type' => 0, 'store_id' => NULL, 'random' => FALSE, 'search' => FALSE, 'rule' => FALSE], // 开卡数量选择配置
            'carrier_status'       => FALSE, // 物流运营商状态
            'carrier_config'       => ['type' => 0, 'shops' => []], // 物流运营商配置
            'code_remote'          => NULL, // 产品编码（第三方）
            'form_config'          => [ // 订单表单配置
                                        'receiver_region'      => TRUE, // 收货地址（省市区）
                                        'receiver_name'        => TRUE, // 收货人姓名
                                        'receiver_phone_num'   => TRUE, // 收货人手机号
                                        'receiver_phone_valid' => FALSE,//短信验证
                                        'receiver_address'     => TRUE, // 收货详细地址
                                        'card_name'            => FALSE, // 实名认证姓名
                                        'card_num'             => FALSE, // 实名认证身份证号
                                        'card_pic'             => FALSE, // 实名认证身份证照片
                                        'user_card_pic'        => FALSE, // 用户上传的身份证照片
                                        'user_pic'             => FALSE, // 用户上传的其他照片
            ],
            'page_config'          => [ // 产品页面配置
                                        'top_image'  => '', // 顶部图片
                                        'main_color' => '#FFF', // 主色调
                                        'button'     => [ // 按钮配置
                                                          'text'          => '立刻领取',
                                                          'bg_color'      => '#FF1900',
                                                          'animate'       => FALSE,
                                                          'border_radius' => FALSE,
                                                          'color'         => '#FFF',
                                        ],
            ],
            'commission_total'     => 0, // 提成总额
            'commission_condition' => NULL, // 提成条件
            'commission_config'    => [
                'created' => ['status' => FALSE, 'comm' => ['d' => 0, 'p' => 0]],
                'paid'    => ['status' => FALSE, 'comm' => ['d' => 0, 'p' => 0]],
                'active'  => ['status' => FALSE, 'comm' => ['d' => 0, 'p' => 0]],
                'charge'  => ['status' => FALSE, 'comm' => ['d' => 0, 'p' => 0]],
                'online'  => ['status' => FALSE, 'comm' => [], 'exec_comm' => []],
            ], // 提成配置
            'buy_num_valid_status' => FALSE, // 是否开启购买数量限制
            'buy_num_valid_config' => [
                'type' => 0, // 0:全局,1:同运营商,2:同套餐,3:同店铺,
                'num'  => 2, // 购买数量限制配置
            ],
            'local_valid_config'   => [
                'blacklist' => [
                    'card'      => FALSE,
                    'lat_lng'   => FALSE,
                    'phone_num' => FALSE,
                ],
                'api'       => [
                    'phone_card_name' => FALSE, //三要素
                    'phone_name'      => FALSE, // 二要素
                    'face_card'       => FALSE,//人脸 ->证件号码
                    'face_card_pic'   => FALSE,// 人脸 -> 证件图片
                    'gzt'             => FALSE,//国政通
                    'operator_stole'  => FALSE,
                ],
            ], // 本地接口地址
            'remote_api_status'    => FALSE, // 是否启用远程接口
            'remote_api_config'    => [ // 远程接口配置
                                        'api_id'   => NULL,  // 接口ID
                                        'valid'    => FALSE, // 远程校验
                                        'send'     => FALSE, // 远程推送
                                        'key_bind' => [],    // 绑定信息
                                        'config'   => [],    // 配置,留空则使用接口默认配置
            ],
            'recharge_status'      => FALSE, // 是否支持充值
            'recharge_config'      => [
                'show' => [],
                'exec' => [],
            ], // 充值配置
            'pre_charge_status'    => FALSE, // 是否支持预充值
            'pre_charge_amount'    => 0, // 预充值金额
            'active_url'           => NULL, // 激活链接
            'sales'                => 0, // 销量
            'standard_fee'         => 0, // 规格->月租
            'standard_voice'       => 0, // 规格->通话时长
            'standard_sms'         => 0, // 规格->短信数量
            'standard_data'        => '0', // 规格->流量
            'region_province_code' => '0', // 归属省份编码
            'region_province_name' => NULL, // 归属省份编码
            'region_city_code'     => '0', // 归属城市编码
            'region_city_name'     => NULL, // 归属城市编码
        ];
    }
    
    /**
     * 获取商品列表
     *
     * @param array  $conditions 筛选条件
     * @param int    $pageSize   每页显示数量
     * @param int    $page       当前页码
     * @param string $sortBy     排序字段
     * @param string $sortOrder  排序方式（asc 或 desc）
     *
     * @return array 商品信息列表
     */
    public static function clientGetList(array $conditions = [], int $pageSize = 20, int $page = 1, string $sortBy = 'id', string $sortOrder = 'asc'): array
    {
//       todo: 添加渠道/店铺的修复
        
        $fetch = ProductPackage::query();
        
        if (!empty($conditions['region'])) {
            $region = $conditions['region'];
            if (!empty($region['province']['code'])) {
                $fetch->where('region_province_code', $region['province']['code']);
            }
            if (!empty($region['city']['code'])) {
                $fetch->where('region_city_code', $region['city']['code']);
            }
        }
        
        if (!empty($conditions['operator'])) {
            $fetch->where('operator', $conditions['operator']);
        }
        
        if (!empty($conditions['sort'])) {
            switch ($conditions['sort']) {
                case 1:
                    $sortBy    = 'sales';
                    $sortOrder = 'desc';
                    break;
                case 2:
                    $sortBy    = 'price';
                    $sortOrder = 'asc';
                    break;
                case 3:
                    $sortBy    = 'id';
                    $sortOrder = 'desc';
                    break;
            }
        }
        
        if (!empty($conditions['standard'])) {
            $standard = $conditions['standard'];
            if (!empty($standard['fee'])) {
                $feeArr = explode("|", $standard['fee']);
                $fetch->whereBetween('standard_fee', [$feeArr[0] ?? 0, $feeArr[1] ?? 99999999]);
            }
            if (!empty($standard['data'])) {
                $dataArr = explode("|", $standard['data']);
                $fetch->whereBetween('standard_data', [$dataArr[0] ?? 0, $dataArr[1] ?? 99999999]);
            }
            if (!empty($standard['sms'])) {
                $smsArr = explode("|", $standard['sms']);
                $fetch->whereBetween('standard_sms', [$smsArr[0] ?? 0, $smsArr[1] ?? 99999999]);
            }
            if (!empty($standard['voice'])) {
                $voiceArr = explode("|", $standard['voice']);
                $fetch->whereBetween('standard_voice', [$voiceArr[0] ?? 0, $voiceArr[1] ?? 99999999]);
            }
        }
        
        $total = $fetch->count();
        // 限制记录数，并获取数据列表
        $data = $fetch->orderBy($sortBy, $sortOrder)
                      ->skip(($page - 1) * $pageSize)
                      ->take($pageSize)
                      ->get()
                      ->toArray();
        
        //todo: 取出隐藏字段
        
        foreach ($data as $key => $package) {
            $data[$key] = static::clientFormat($package, TRUE);
        }
        return [
            'list'      => $data,
            'total'     => $total,
            'pageSize'  => $pageSize,
            'page'      => $page,
            'last_page' => ceil($total / $pageSize),
        ];
    }
    
    public static function clientGetOne(array|int $idOrCondition): ?array
    {
        $data = parent::clientGetOne($idOrCondition);
        $data = Arr::only($data, [
            'agreement', 'active_url', 'code', 'cover', 'id', 'form_config', 'page_config', 'images', 'intro', 'is_recommend', 'name',
            'operator', 'standard_config', 'price', 'price_show', 'region_city_code', 'region_province_code', 'sales', 'select_num_status', 'select_num_config',
            'shop_id', 'status', 'stock_num', 'stock_status', 'tags', 'to_index', 'type',
        ]);
        
        return $data;
    }
    
    
    protected static function clientFormat($data, $isList = FALSE): array
    {
        $data = static::format($data);
        // 处理tags等
        if (!empty($data['tags'])) {
            foreach ($data['tags'] as $key => $tagId) {
                try {
                    $tag     = TagLogic::getOne($tagId);
                    $tagName = $tag['name'];
                } catch (\Exception $e) {
                    continue;
                }
                $data['tags'][$key] = [
                    'tid'  => $tagId,
                    'name' => $tagName,
                ];
            }
        }
        if ($isList) {
            $data = Arr::only($data, [
                'id', 'name', 'intro', 'tags', 'standard_config', 'price', 'price_show', 'sales', 'cover', 'operator', 'stock', 'region_province', 'region_city', 'code',
            ]);
        }
        return $data;
        
    }
    
}