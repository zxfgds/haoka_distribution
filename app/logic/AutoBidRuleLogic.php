<?php

namespace app\logic;

use app\model\AutoBidRule;
use Exception;

class AutoBidRuleLogic extends BaseLogic
{
    protected static string $model = AutoBidRule::class;
    
    
    public static function modify(int|array|string $idOrCondition, array $data): bool
    {
        static::checkBidRules($data['rules']);
        return parent::modify($idOrCondition, $data); // TODO: Change the autogenerated stub
        
    }
    
    /**
     * 根据加价规则计算新价格
     *
     * @param float $price             原始价格
     * @param array $rules             加价规则数组，每个规则应包含 condition 和 action 字段，如：
     *                                 [
     *                                 [
     *                                 'condition' => [
     *                                 'min_price' => 0,    // 最低价格
     *                                 'max_price' => 100,  // 最高价格
     *                                 'price'     => 10,   // 参考价格
     *                                 ],
     *                                 'action'    => [
     *                                 'type'   => 'fixed',      // 行动类型（'fixed' 或 'percentage'）
     *                                 'amount' => 20,           // 行动金额或百分比
     *                                 ],
     *                                 ],
     *                                 // ...
     *                                 ]
     *
     * @return float 新价格
     * @throws Exception 如果规则格式错误或无效，则抛出异常
     */
    function calculateNewPrice(float $price, array $rules): float
    {
        $matchedRule = NULL;
        $maxPrice    = PHP_FLOAT_MIN; // 初始化为最小值
        $minPrice    = PHP_FLOAT_MAX; // 初始化为最大值
        
        foreach ($rules as $rule) {
            $condition = $rule['condition'];
            
            if ($condition['max_price'] > $maxPrice) {
                $maxPrice = $condition['max_price'];
            }
            
            if ($condition['min_price'] < $minPrice) {
                $minPrice = $condition['min_price'];
            }
            
            if ($price >= $condition['min_price'] && $price <= $condition['max_price']) {
                $matchedRule = $rule;
                break;
            }
        }
        
        if (!$matchedRule) {
            if ($price > $maxPrice) {
                $matchedRule = array_pop($rules);
            } else if ($price < $minPrice) {
                $matchedRule = $rules[0];
            } else {
                foreach ($rules as $rule) {
                    $condition = $rule['condition'];
                    
                    if ($price >= $condition['min_price'] && $price <= $condition['max_price']) {
                        $matchedRule = $rule;
                        break;
                    }
                }
            }
        }
        
        $action = $matchedRule['action'];
        
        switch ($action['type']) {
            case 'fixed':
                $newPrice = $price + $action['amount'];
                break;
            
            case 'percentage':
                $increment = $price * ($action['amount'] / 100);
                $newPrice  = $price + $increment;
                break;
        }
        
        return $newPrice;//?? throw new Exception('匹配失败');
    }
    
    
    /**
     * 检查加价规则是否正确
     *
     * @param array $rules 加价规则
     *
     * @return bool 是否正确
     * @throws Exception 当规则无效时抛出异常
     */
    public static function checkBidRules(array $rules): bool
    {
        if (!is_array($rules)) {
            throw new Exception('Invalid bid rules: the input parameter should be an array.');
        }
        
        foreach ($rules as $index => $rule) {
            static::checkBidRuleCondition($index, $rule);
            static::checkBidRuleAction($index, $rule);
            static::checkBidRulePrice($index, $rule);
        }
        
        static::checkBidRuleOverlap($rules);
        
        return TRUE;
    }
    
    /**
     * 检查规则条件是否正确
     *
     * @param int   $index 规则索引
     * @param array $rule  规则
     *
     * @throws Exception 当规则条件无效时抛出异常
     */
    public static function checkBidRuleCondition(int $index, array $rule)
    {
        if (!isset($rule['condition']) || !is_array($rule['condition'])) {
            throw new Exception("Invalid rule at index {$index}: the condition is missing or not an array.");
        }
        
        $condition = $rule['condition'];
        
        if (!isset($condition['min_price'], $condition['max_price'])
            || !is_numeric($condition['min_price']) || !is_numeric($condition['max_price'])
            || $condition['min_price'] > $condition['max_price']
        ) {
            throw new Exception("Invalid rule at index {$index}: the price range is missing or invalid.");
        }
    }
    
    /**
     * 检查规则行动是否正确
     *
     * @param int   $index 规则索引
     * @param array $rule  规则
     *
     * @throws Exception 当规则行动无效时抛出异常
     */
    public static function checkBidRuleAction(int $index, array $rule)
    {
        if (!isset($rule['action']) || !is_array($rule['action'])) {
            throw new Exception("Invalid rule at index {$index}: the action is missing or not an array.");
        }
        
        $action = $rule['action'];
        
        if (!isset($action['type'], $action['amount'])
            || !in_array($action['type'], ['fixed', 'percentage'])
            || !is_numeric($action['amount']) || $action['amount'] <= 0
        ) {
            throw new Exception("Invalid rule at index {$index}: the action type or amount is missing or invalid.");
        }
    }
    
    /**
     * 检查规则价格是否正确
     *
     * @param int   $index 规则索引
     * @param array $rule  规则
     *
     * @throws Exception 当规则价格无效时抛出异常
     */
    public static function checkBidRulePrice(int $index, array $rule)
    {
        if (!isset($rule['condition']['max_price']) || !is_numeric($rule['condition']['min_price'])) {
            throw new Exception("Invalid rule at index {$index}: the price is missing or not a number.");
        }
    }
    
    /**
     * 检查加价规则之间的价格区间是否有重叠
     *
     * @param array $rules 加价规则数组
     *
     * @throws Exception 当加价规则之间存在重叠时抛出异常
     */
    public static function checkBidRuleOverlap(array $rules)
    {
        $ranges = [];
        
        foreach ($rules as $i => $rule) {
            $range = [
                'min_price' => $rule['condition']['min_price'],
                'max_price' => $rule['condition']['max_price'],
                'index'     => $i,
            ];
            
            foreach ($ranges as $existingRange) {
                if ($range['min_price'] <= $existingRange['max_price'] && $range['max_price'] >= $existingRange['min_price']) {
                    throw new Exception("Invalid bid rules: the price ranges of rule {$i} and rule {$existingRange['index']} should not overlap.");
                }
            }
            
            $ranges[] = $range;
        }
    }
    
}